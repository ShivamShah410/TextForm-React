{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setStyle","btnText","setBtnText","className","id","style","type","onClick","Navbar","props","mode","to","title","href","tabIndex","toggleMode","htmlFor","placeholder","TextForm","ipText","setIpText","opText","setOpText","wordCount","replace","split","filter","e","length","modeStyle","ipHeading","rows","value","onChange","event","target","textUp","toUpperCase","showAlert","textLow","toLowerCase","text","document","getElementById","select","navigator","clipboard","writeText","newText","join","opHeading","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.71461e0b.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nexport default function About() {\r\n\r\n  const [myStyle, setStyle] = useState({\r\n    color: 'black',\r\n    backgroundColor: 'white'\r\n  })\r\n\r\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n  const toggleStyle = ()=>{\r\n    if(myStyle.color === 'black'){\r\n      setStyle({\r\n        color: 'white',\r\n        backgroundColor: 'black'\r\n      });\r\n      setBtnText(\"Enable Light Mode\");\r\n    } else {\r\n      setStyle({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n      });\r\n      setBtnText(\"Enable Dark Mode\");\r\n    }\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classNamees that we use to myStyle each element. These classNamees control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\" style={myStyle}>\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to myStyle each element. These\r\n                classNamees control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\" style={myStyle}>\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n                style={myStyle}\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={myStyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to myStyle each element. These\r\n                classNamees control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button type=\"button\" className=\"btn btn-dark my-3\" onClick={toggleStyle}>{btnText}</button>\r\n      </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n\r\n  // let darkModeTextColor = \"\";\r\n  // if (props.mode === \"dark\") {\r\n  //   darkModeTextColor = \"light\";\r\n  // } else {\r\n  //   darkModeTextColor = \"dark\";\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  About\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a\r\n                  className=\"nav-link disabled\"\r\n                  href=\"/\"\r\n                  tabIndex=\"-1\"\r\n                  aria-disabled=\"true\"\r\n                >\r\n                  Disabled\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className={`form-check-label text-${props.mode === 'dark' ? 'light' : 'dark'}`}\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable {props.mode === 'light' ? 'Dark' : 'Light'} Mode\r\n              </label>\r\n            </div>\r\n            <form className=\"d-flex mx-3\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  mode: PropTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"TextUtils\",\r\n  mode: \"light\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [ipText, setIpText] = useState(\"This is my sample input text\")\r\n    const [opText, setOpText] = useState(\"This is my sample Output text\")\r\n\r\n    let wordCount = ipText.replace('\\n', ' ').split(\" \").filter((e) => {return e.length !== 0}).length;\r\n\r\n    const convToUpper = ()=>{\r\n        // console.log(\"Convert to UpperCase was clicked for text : \" + ipText);\r\n        let textUp = ipText.toUpperCase();\r\n        setOpText(textUp);\r\n        props.showAlert(\"Converted to UpperCase\", \"success\")\r\n    }\r\n\r\n    const convToLower = ()=>{\r\n        // console.log(\"Convert to LowerCase was clicked for text : \" + ipText);\r\n        let textLow = ipText.toLowerCase();\r\n        setOpText(textLow);\r\n        props.showAlert(\"Converted to LowerCase\", \"success\")\r\n    }\r\n\r\n    const reset = ()=>{\r\n        setIpText(\"\");\r\n        setOpText(\"\");\r\n    }\r\n\r\n    let modeStyle = {}\r\n    if(props.mode === 'dark') {\r\n        modeStyle = {\r\n            backgroundColor: '#3b3b3b',\r\n            color: 'white'\r\n        }\r\n    } else {\r\n        modeStyle = {\r\n            backgroundColor: 'white',\r\n            color: 'black'\r\n        }\r\n    }\r\n\r\n    const copyTextFunc = ()=>{\r\n        // var text = ipText;\r\n        let text = document.getElementById(\"myboxinput\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied to clipboard !!\", \"success\")\r\n    }\r\n\r\n    const removeExtraSpace = ()=>{\r\n        let newText = ipText.split(/[ ]+/);\r\n        setOpText(newText.join(\" \"));\r\n    }\r\n\r\n    const changeIpFunc = (event)=>{\r\n        setIpText(event.target.value);\r\n    }\r\n\r\n    const changeOpFunc = (event)=>{\r\n        setOpText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container my-3\">\r\n                <h3> {props.ipHeading} </h3>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control mb-5\" id=\"myboxinput\" rows=\"5\" value={ipText} onChange={changeIpFunc} style={modeStyle}></textarea>\r\n                </div>\r\n                <hr/>\r\n                <h3>Operations</h3>\r\n                <button className=\"btn btn-dark mx-1 my-1\" onClick={convToUpper}>Convert To Uppercase</button>\r\n                <button className=\"btn btn-dark mx-1 my-1\" onClick={convToLower}>Convert To Lowercase</button>\r\n                <button className=\"btn btn-dark mx-1 my-1\" onClick={reset}>Reset</button>\r\n                <button className=\"btn btn-dark mx-1 my-1\" onClick={copyTextFunc}>Copy Text</button>\r\n                <button className=\"btn btn-dark mx-1 my-1\" onClick={removeExtraSpace}>Remove Extra Space</button>\r\n                <hr/>\r\n                <h3> {props.opHeading} </h3>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control mb-5\" id=\"myboxoutput\" rows=\"5\" value={opText} onChange={changeOpFunc} style={modeStyle}></textarea>\r\n                </div>\r\n                <hr/>\r\n                <h4>Your text summary</h4>\r\n                <p><b>{ipText===\"\"?0:ipText.split(\"\\n\").length}</b> lines, <b>{ipText===\"\"? 0 : wordCount}</b> words, <b>{ipText.length}</b> letters</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n\r\n    return (\r\n        \r\n        props.alert && <> <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div> </>\r\n\r\n    )\r\n}\r\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    showAlert(\"Mode Changed\", \"success\");\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      document.title = \"TextUtils - Light\";\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#002259\";\n      document.body.style.color = \"white\";\n      document.title = \"TextUtils - Dark\";\n\n      // setInterval(() => {\n      //   document.title = 'Good Morning';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n    }\n  };\n\n  return (\n    <>\n      <Router>\n        <div className='container mx-3'>\n        <Navbar mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n\n        {/* /users --> componenet 1\n            /users/home --> component 2\n            if we don't use exact it will render component 1 in both calls\n            by default react use partial matching  */}\n\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm\n              ipHeading=\"Enter your Text to analyse\"\n              opHeading=\"This is your output text\"\n              mode={mode}\n              showAlert={showAlert}\n            />\n          </Route>\n        </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}